# import pandas as pd
# import numpy as np
# import plotly.graph_objects as go
# 
# from backend.patterns import DoubleTopPattern
# from backend.base_strategies import BasePatternStrategy
# from backend.utils.rolling_window import rw_top
# 
# 
# 
# 
# 
# class DoubleTopStrategy(BasePatternStrategy):
#     def __init__(self, order=6, min_peak_distance=None, max_price_diff=0.05, min_trough_decline=0.03):
#         self.order = order
#         # Kho·∫£ng c√°ch t·ªëi thi·ªÉu gi·ªØa 2 ƒë·ªânh (m·∫∑c ƒë·ªãnh = 2 * order)
#         self.min_peak_distance = min_peak_distance or order * 2
#         # Sai s·ªë gi√° t·ªëi ƒëa gi·ªØa 2 ƒë·ªânh (5%)
#         self.max_price_diff = max_price_diff
#         # M·ª©c gi·∫£m t·ªëi thi·ªÉu t·ª´ ƒë·ªânh xu·ªëng ƒë√°y (3%)
#         self.min_trough_decline = min_trough_decline
# 
#     @property
#     def name(self) -> str:
#         return "Double Top"
# 
#     def transform_data(self, raw_data: pd.DataFrame) -> pd.DataFrame:
#         data = raw_data.copy()
#         data['date'] = data['date'].astype('datetime64[s]')
#         data = data.set_index('date')
#         return data
# 
#     def find_patterns(self, data: pd.DataFrame):
#         transformed_data = self.transform_data(raw_data=data)
#         data_slice = transformed_data['close'].to_numpy()
#         double_tops = self._find_double_top_logic(data=data_slice, order=self.order)
#         return double_tops
# 
#     def plot_pattern(self, candle_data: pd.DataFrame, pat: DoubleTopPattern):
#         self._plot_double_top_logic(candle_data=candle_data, pat=pat)
# 
#     def _find_double_top_logic(self, data: np.array, order: int):
#         """
#         T√¨m ki·∫øm m·∫´u h√¨nh Double Top v·ªõi logic c·∫£i thi·ªán:
#         1. T√¨m c√°c ƒë·ªânh c·ª•c b·ªô
#         2. Ki·ªÉm tra 2 ƒë·ªânh c√≥ c√πng m·ª©c gi√° (¬±5%)
#         3. T√¨m ƒë√°y gi·ªØa 2 ƒë·ªânh
#         4. ƒê∆∞·ªùng neckline n·ªëi t·ª´ ƒë√°y trung t√¢m
#         5. X√°c nh·∫≠n khi gi√° ph√° v·ª° neckline
#         """
#         # T√¨m t·∫•t c·∫£ c√°c ƒë·ªânh c·ª•c b·ªô
#         peaks = []
#         for i in range(order, len(data) - order):
#             if rw_top(data, i + order, order):  # i + order v√¨ rw_top c·∫ßn ƒëi·ªÅu ch·ªânh
#                 peaks.append(i)
# 
#         patterns = []
# 
#         # Ki·ªÉm tra t·ª´ng c·∫∑p ƒë·ªânh
#         for i in range(len(peaks) - 1):
#             for j in range(i + 1, len(peaks)):
#                 first_peak = peaks[i]
#                 second_peak = peaks[j]
# 
#                 # 1. Ki·ªÉm tra kho·∫£ng c√°ch t·ªëi thi·ªÉu
#                 if second_peak - first_peak < self.min_peak_distance:
#                     continue
# 
#                 # 2. Ki·ªÉm tra gi√° c·ªßa 2 ƒë·ªânh g·∫ßn b·∫±ng nhau
#                 price_diff = abs(data[first_peak] - data[second_peak]) / max(data[first_peak], data[second_peak])
#                 if price_diff > self.max_price_diff:
#                     continue
# 
#                 # 3. T√¨m ƒë√°y gi·ªØa 2 ƒë·ªânh
#                 trough = np.argmin(data[first_peak:second_peak + 1]) + first_peak
# 
#                 # Ki·ªÉm tra ƒë√°y c√≥ th·ª±c s·ª± th·∫•p h∆°n 2 ƒë·ªânh
#                 trough_decline_1 = (data[first_peak] - data[trough]) / data[first_peak]
#                 trough_decline_2 = (data[second_peak] - data[trough]) / data[second_peak]
# 
#                 if trough_decline_1 < self.min_trough_decline or trough_decline_2 < self.min_trough_decline:
#                     continue
# 
#                 # 4. T·∫°o pattern v·ªõi neckline t·∫°i m·ª©c gi√° c·ªßa ƒë√°y
#                 pattern = DoubleTopPattern(
#                     first_peak=first_peak,
#                     first_peak_price=data[first_peak],
#                     trough=trough,
#                     trough_price=data[trough],
#                     second_peak=second_peak,
#                     second_peak_price=data[second_peak],
#                     neckline_start=trough,  # Neckline b·∫Øt ƒë·∫ßu t·ª´ ƒë√°y
#                     neckline_end=len(data) - 1,  # K√©o d√†i ƒë·∫øn cu·ªëi d·ªØ li·ªáu
#                     neckline_price=data[trough]  # M·ª©c gi√° neckline = gi√° ƒë√°y
#                 )
# 
#                 # 5. Ki·ªÉm tra x√°c nh·∫≠n breakout sau ƒë·ªânh th·ª© 2
#                 confirmed = False
#                 for k in range(second_peak + 1, len(data)):
#                     # X√°c nh·∫≠n khi gi√° ƒë√≥ng c·ª≠a v∆∞·ª£t qua neckline
#                     if data[k] < pattern.neckline_price:
#                         pattern.confirmed_at = k
#                         pattern.confirmed_price = data[k]
#                         confirmed = True
#                         break
# 
#                 # Ch·ªâ th√™m pattern ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n
#                 if confirmed:
#                     patterns.append(pattern)
#                     break  # Tho√°t kh·ªèi v√≤ng l·∫∑p j ƒë·ªÉ tr√°nh tr√πng l·∫∑p
# 
#         return patterns
# 
#     def _plot_double_top_logic(self, candle_data: pd.DataFrame, pat: DoubleTopPattern, pad=5):
#         """
#         V·∫Ω bi·ªÉu ƒë·ªì Double Top pattern v·ªõi:
#         - Candlestick chart
#         - ƒê√°nh d·∫•u 2 ƒë·ªânh v√† ƒë√°y
#         - ƒê∆∞·ªùng neckline
#         - ƒêi·ªÉm x√°c nh·∫≠n breakout
#         """
#         if pad < 0:
#             pad = 0
# 
#         candle_data = self.transform_data(candle_data)
#         idx = candle_data.index
# 
#         # X√°c ƒë·ªãnh ph·∫°m vi hi·ªÉn th·ªã
#         start_i = max(0, pat.first_peak - pad)
#         end_i = min(len(candle_data) - 1,
#                     pat.confirmed_at + pad if pat.confirmed_at != -1 else pat.second_peak + pad * 2)
# 
#         dat = candle_data.iloc[start_i:end_i + 1]
# 
#         fig = go.Figure()
# 
#         # 1. Candlestick ch√≠nh
#         fig.add_trace(
#             go.Candlestick(
#                 x=dat.index,
#                 open=dat['open'],
#                 high=dat['high'],
#                 low=dat['low'],
#                 close=dat['close'],
#                 name='Price',
#                 increasing_line_color='#00FF88',
#                 decreasing_line_color='#FF4444',
#                 increasing_fillcolor='rgba(0, 255, 136, 0.3)',
#                 decreasing_fillcolor='rgba(255, 68, 68, 0.3)',
#                 line=dict(width=1)
#             )
#         )
# 
#         # 2. ƒê∆∞·ªùng neckline (ƒë∆∞·ªùng kh√°ng c·ª±/h·ªó tr·ª£)
#         neckline_start_idx = max(start_i, pat.trough)
#         neckline_end_idx = min(end_i, pat.confirmed_at if pat.confirmed_at != -1 else end_i)
# 
#         fig.add_trace(
#             go.Scatter(
#                 x=[idx[neckline_start_idx], idx[neckline_end_idx]],
#                 y=[pat.neckline_price, pat.neckline_price],
#                 mode='lines',
#                 line=dict(color='#FFD700', width=3, dash='dash'),
#                 name='Neckline (Support)',
#                 hovertemplate='<b>Neckline</b><br>Price: %{y:.4f}<extra></extra>'
#             )
#         )
# 
#         # 3. ƒê∆∞·ªùng k·∫øt n·ªëi c√°c ƒëi·ªÉm ch√≠nh
#         # K·∫øt n·ªëi ƒë·ªânh 1 -> ƒë√°y -> ƒë·ªânh 2
#         connection_x = [idx[pat.first_peak], idx[pat.trough], idx[pat.second_peak]]
#         connection_y = [pat.first_peak_price, pat.trough_price, pat.second_peak_price]
# 
#         fig.add_trace(
#             go.Scatter(
#                 x=connection_x,
#                 y=connection_y,
#                 mode='lines',
#                 line=dict(color='#FF6B6B', width=2),
#                 name='Pattern Structure',
#                 hovertemplate='<b>Pattern Line</b><br>Price: %{y:.4f}<extra></extra>'
#             )
#         )
# 
#         # 4. ƒê√°nh d·∫•u c√°c ƒëi·ªÉm quan tr·ªçng
#         key_points = [
#             (idx[pat.first_peak], pat.first_peak_price, 'First Peak', '#FF6B6B', 'diamond'),
#             (idx[pat.trough], pat.trough_price, 'Trough', '#4ECDC4', 'triangle-down'),
#             (idx[pat.second_peak], pat.second_peak_price, 'Second Peak', '#FF6B6B', 'diamond'),
#         ]
# 
#         if pat.confirmed_at != -1:
#             key_points.append(
#                 (idx[pat.confirmed_at], pat.confirmed_price, 'Breakout', '#FFA500', 'star')
#             )
# 
#         for x, y, label, color, symbol in key_points:
#             fig.add_trace(
#                 go.Scatter(
#                     x=[x], y=[y],
#                     mode='markers',
#                     marker=dict(
#                         color=color,
#                         size=12,
#                         symbol=symbol,
#                         line=dict(color='white', width=2)
#                     ),
#                     name=label,
#                     hovertemplate=f'<b>{label}</b><br>Price: %{{y:.4f}}<br>Time: %{{x}}<extra></extra>'
#                 )
#             )
# 
#         # 5. Th√™m annotations
#         annotations = [
#             dict(x=idx[pat.first_peak], y=pat.first_peak_price, text="Peak 1",
#                  showarrow=True, arrowhead=2, arrowcolor='#FF6B6B', ay=-30),
#             dict(x=idx[pat.trough], y=pat.trough_price, text="Trough",
#                  showarrow=True, arrowhead=2, arrowcolor='#4ECDC4', ay=30),
#             dict(x=idx[pat.second_peak], y=pat.second_peak_price, text="Peak 2",
#                  showarrow=True, arrowhead=2, arrowcolor='#FF6B6B', ay=-30),
#         ]
# 
#         if pat.confirmed_at != -1:
#             annotations.append(
#                 dict(x=idx[pat.confirmed_at], y=pat.confirmed_price, text="Breakout!",
#                      showarrow=True, arrowhead=2, arrowcolor='#FFA500', ay=30)
#             )
# 
#         # 6. Layout c·∫£i thi·ªán
#         fig.update_layout(
#             title=dict(
#                 text='üìâ Double Top Pattern - Bearish Reversal Signal',
#                 x=0.5,
#                 font=dict(size=20, color='white')
#             ),
#             template='plotly_dark',
#             showlegend=True,
#             height=600,
#             width=1100,
#             dragmode='pan',
#             annotations=annotations,
#             legend=dict(
#                 yanchor="top",
#                 y=0.99,
#                 xanchor="left",
#                 x=0.01
#             )
#         )
# 
#         fig.update_xaxes(
#             title='Time Period',
#             gridcolor='rgba(128,128,128,0.2)',
#             showspikes=True
#         )
# 
#         fig.update_yaxes(
#             title='Price',
#             gridcolor='rgba(128,128,128,0.2)',
#             showspikes=True
#         )
# 
#         fig.show()
# 
#         # In th√¥ng tin pattern
#         print(f"\n{'=' * 50}")
#         print(f"DOUBLE TOP PATTERN DETECTED")
#         print(f"{'=' * 50}")
#         print(f"First Peak:  {pat.first_peak_price:.4f} at index {pat.first_peak}")
#         print(f"Trough:      {pat.trough_price:.4f} at index {pat.trough}")
#         print(f"Second Peak: {pat.second_peak_price:.4f} at index {pat.second_peak}")
#         print(f"Neckline:    {pat.neckline_price:.4f}")
# 
#         if pat.confirmed_at != -1:
#             print(f"Confirmed:   {pat.confirmed_price:.4f} at index {pat.confirmed_at}")
#             print(f"üìâ BEARISH SIGNAL CONFIRMED!")
#         else:
#             print(f"‚è≥ Waiting for breakout confirmation...")
# 
#         # T√≠nh to√°n c√°c ch·ªâ s·ªë k·ªπ thu·∫≠t
#         price_similarity = abs(pat.first_peak_price - pat.second_peak_price) / pat.first_peak_price * 100
#         decline_from_peak1 = (pat.first_peak_price - pat.trough_price) / pat.first_peak_price * 100
#         decline_from_peak2 = (pat.second_peak_price - pat.trough_price) / pat.second_peak_price * 100
# 
#         print(f"\nPattern Statistics:")
#         print(f"Price Similarity: {price_similarity:.2f}% difference")
#         print(f"Decline from Peak 1: {decline_from_peak1:.2f}%")
#         print(f"Decline from Peak 2: {decline_from_peak2:.2f}%")
#         print(f"{'=' * 50}")